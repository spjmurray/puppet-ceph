# == Define: ceph::keyring
#
# Installs a keyring to the specified location. If set on
# a monitor node the key will be injected into the auth
# database
#
# === Parameters
#
# [*name*]
#   Absolute path of the keyring e.g. /etc/ceph/ceph.client.admin.keyring'
#
# [*user*]
#   User the key belongs to e.g. client.admin
#
# [*key*]
#   Key as generated by ceph-authtool (16 bytes, base 64 encoding)
#
# [*caps_mon*]
#   Monitor capabilities
#
# [*caps_mds*]
#   Metadata server capabilities
#
# [*caps_osd*]
#   Object storage daemon capabilities
#
# [*caps_mgr*]
#   Manager capabilities
#
# [*owner*]
#   Keyring file owner
#
# [*group*]
#   Keyring file group
#
# [*mode*]
#   Keyring file mode
#
define ceph::keyring (
  $user,
  $key,
  $caps_mon = undef,
  $caps_mds = undef,
  $caps_osd = undef,
  $caps_mgr = undef,
  $owner = $::ceph::user,
  $group = $::ceph::group,
  $mode = '0644',
) {

  assert_private()

  # Note: puppet appears to run matchpathcon before ceph is installed and breaks idempotency
  if $name =~ /^\/var\/lib\/ceph/ {
    File {
      seltype => $::ceph::seltype,
    }
  }

  file { $name:
    ensure  => file,
    owner   => $owner,
    group   => $group,
    mode    => $mode,
    content => template('ceph/keyring.erb'),
  }

  if $ceph::mon {

    include ::ceph::mon

    $mon_name = 'mon.'
    $mon_key = "/var/lib/ceph/mon/ceph-${ceph::mon_id}/keyring"

    File[$name] ->

    exec { "keyring inject ${user}":
      command => "/usr/bin/ceph -n ${mon_name} -k ${mon_key} auth import -i ${name}",
      unless  => "/usr/bin/ceph -n ${mon_name} -k ${mon_key} auth list | grep ${key}",
    }

  }

}
